package migrations

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
)

type CassiopeiaMigration struct {
	block *big.Int

	soulDropAddress   common.Address
	holdAmountAddress common.Address
}

func NewCassiopeiaMigration(config *params.ChainConfig) *CassiopeiaMigration {
	if config.SystemContracts == nil || config.CassiopeiaBlock == nil {
		return &CassiopeiaMigration{}
	}

	return &CassiopeiaMigration{
		block:             config.CassiopeiaBlock,
		soulDropAddress:   config.SystemContracts.SoulDrop,
		holdAmountAddress: config.SystemContracts.HoldAmount,
	}
}

func (m *CassiopeiaMigration) Block() *big.Int {
	return m.block
}

func (m *CassiopeiaMigration) Name() string {
	return "cassiopeia"
}

func (m *CassiopeiaMigration) Execute(stateDB vm.StateDB) {
	if m.soulDropAddress == (common.Address{}) || m.holdAmountAddress == (common.Address{}) {
		log.Crit("invalid config: system contracts cannot be located at zero address")
	}

	// The purpose of this migration is syncing hold levels with WhiteBIT Exchange.
	// A new hold level will be added (1500 WBT).
	// It will be located between current level 2 (200 WBT) and level 3 (4000 WBT).
	// So all levels starting from 3 will be shifted by 1.
	// Migration consists of:
	// - HoldAmount contract's bytecode update (as it contains hardcoded hold level determination based on the specified amount);
	// - SoulDrop contract's storage update (as there are no methods for modifying percents by hold level, but it should be adjusted).

	// Step 1 - updating HoldAmount contract.
	// Contract's code can be found at https://github.com/whitebit-exchange/soul-ecosystem-contracts/blob/main/contracts/attributes/HoldAmount.sol
	// It has been compiled using Remix, and the bytecode has been taken from the compilation result.
	stateDB.SetCode(m.holdAmountAddress, common.Hex2Bytes("608060405234801561001057600080fd5b50600436106100885760003560e01c806387de52c51161005b57806387de52c5146101035780638da5cb5b1461011f578063e8300bde1461013d578063f2fde38b1461016d57610088565b806301ffc9a71461008d57806306fdde03146100bd578063715018a6146100db5780637284e416146100e5575b600080fd5b6100a760048036038101906100a29190610787565b610189565b6040516100b491906107cf565b60405180910390f35b6100c561025b565b6040516100d2919061087a565b60405180910390f35b6100e3610294565b005b6100ed6102a8565b6040516100fa919061087a565b60405180910390f35b61011d60048036038101906101189190610988565b6102c4565b005b6101276103e7565b60405161013491906109ea565b60405180910390f35b61015760048036038101906101529190610a05565b610410565b6040516101649190610a4e565b60405180910390f35b61018760048036038101906101829190610a69565b61055d565b005b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061025457507f87de52c5000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6040518060400160405280600b81526020017f486f6c6420616d6f756e7400000000000000000000000000000000000000000081525081565b61029c6105e0565b6102a6600061065e565b565b6040518060600160405280602d8152602001610c93602d913981565b6102cc6103e7565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610ae2565b60405180910390fd5b600060601b6bffffffffffffffffffffffff1916816bffffffffffffffffffffffff191603156103e2576b014adf4b7320334b9000000073ffffffffffffffffffffffffffffffffffffffff168160601c73ffffffffffffffffffffffffffffffffffffffff1611156103e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d890610b74565b60405180910390fd5b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000678ac7230489e8000082101561042b5760009050610558565b680ad78ebc5ac62000008210156104455760019050610558565b685150ae84a8cdf0000082101561045f5760029050610558565b68d8d726b7177a8000008210156104795760039050610558565b69021e19e0c9bab24000008210156104945760049050610558565b6903635c9adc5dea0000008210156104af5760059050610558565b69065a4da25d3016c000008210156104ca5760069050610558565b690cb49b44ba602d8000008210156104e55760079050610558565b69152d02c7e14af68000008210156105005760089050610558565b6921e19e0c9bab2400000082101561051b5760099050610558565b6a01a784379d99db4200000082101561053757600a9050610558565b6a04f68ca6d8cd91c600000082101561055357600b9050610558565b600c90505b919050565b6105656105e0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cb90610c06565b60405180910390fd5b6105dd8161065e565b50565b6105e8610722565b73ffffffffffffffffffffffffffffffffffffffff166106066103e7565b73ffffffffffffffffffffffffffffffffffffffff161461065c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065390610c72565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6107648161072f565b811461076f57600080fd5b50565b6000813590506107818161075b565b92915050565b60006020828403121561079d5761079c61072a565b5b60006107ab84828501610772565b91505092915050565b60008115159050919050565b6107c9816107b4565b82525050565b60006020820190506107e460008301846107c0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610824578082015181840152602081019050610809565b60008484015250505050565b6000601f19601f8301169050919050565b600061084c826107ea565b61085681856107f5565b9350610866818560208601610806565b61086f81610830565b840191505092915050565b600060208201905081810360008301526108948184610841565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108c78261089c565b9050919050565b6108d7816108bc565b81146108e257600080fd5b50565b6000813590506108f4816108ce565b92915050565b6000819050919050565b61090d816108fa565b811461091857600080fd5b50565b60008135905061092a81610904565b92915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b61096581610930565b811461097057600080fd5b50565b6000813590506109828161095c565b92915050565b6000806000606084860312156109a1576109a061072a565b5b60006109af868287016108e5565b93505060206109c08682870161091b565b92505060406109d186828701610973565b9150509250925092565b6109e4816108bc565b82525050565b60006020820190506109ff60008301846109db565b92915050565b600060208284031215610a1b57610a1a61072a565b5b6000610a298482850161091b565b91505092915050565b600060ff82169050919050565b610a4881610a32565b82525050565b6000602082019050610a636000830184610a3f565b92915050565b600060208284031215610a7f57610a7e61072a565b5b6000610a8d848285016108e5565b91505092915050565b7f486f6c64416d6f756e743a207065726d697373696f6e2064656e696564000000600082015250565b6000610acc601d836107f5565b9150610ad782610a96565b602082019050919050565b60006020820190508181036000830152610afb81610abf565b9050919050565b7f486f6c64416d6f756e743a20616d6f756e742073686f756c64206e6f7420626560008201527f2067726561746572207468616e20746f74616c20737570706c79000000000000602082015250565b6000610b5e603a836107f5565b9150610b6982610b02565b604082019050919050565b60006020820190508181036000830152610b8d81610b51565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610bf06026836107f5565b9150610bfb82610b94565b604082019050919050565b60006020820190508181036000830152610c1f81610be3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c5c6020836107f5565b9150610c6782610c26565b602082019050919050565b60006020820190508181036000830152610c8b81610c4f565b905091905056fe526570726573656e747320736f756c27732057425420686f6c6420616d6f756e74206f6e205768697465424954a2646970667358221220e6cf9ba283397cebf66014e711c6729b8c01d23bcccf5b993e6f94f015a5a20f64736f6c63430008130033"))

	// Step 2 - updating SoulDrop contract's storage.
	// SoulDrop contract can be found at https://github.com/whitebit-exchange/soul-ecosystem-contracts/blob/main/contracts/drops/SoulDrop.sol
	// As well as all levels starting from 3 will be shifted by 1, percentByHoldLevel mapping should also be synced in the same way.
	// A new level with index 3 should have a new percent (its value in contract is 1317218729, which represents 1.317218729%),
	// and all previous percents should be shifted, so all mapping values with keys [3; 12] should be set to their actual values.
	// percentByHoldLevel mapping's index in contract's storage layout is 3, and target mapping keys are [3; 12],
	// so all keys to update have been determined using storage layout specification (https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html).

	// percentByHoldLevel[3] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0xcbc4e5fb02c3d1de23a9f1e014b4d2ee5aeaea9505df5e855c9210bf472495af"), common.BigToHash(big.NewInt(1317218729)))
	// percentByHoldLevel[4] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x83ec6a1f0257b830b5e016457c9cf1435391bf56cc98f369a58a54fe93772465"), common.BigToHash(big.NewInt(1317451809)))
	// percentByHoldLevel[5] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x405aad32e1adbac89bb7f176e338b8fc6e994ca210c9bb7bdca249b465942250"), common.BigToHash(big.NewInt(1318187804)))
	// percentByHoldLevel[6] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0xc69056f16cbaa3c616b828e333ab7d3a32310765507f8f58359e99ebb7a885f3"), common.BigToHash(big.NewInt(1319046390)))
	// percentByHoldLevel[7] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0xf2c49132ed1cee2a7e75bde50d332a2f81f1d01e5456d8a19d1df09bd561dbd2"), common.BigToHash(big.NewInt(1321253816)))
	// percentByHoldLevel[8] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x85aaa47b6dc46495bb8824fad4583769726fea36efd831a35556690b830a8fbe"), common.BigToHash(big.NewInt(1326770067)))
	// percentByHoldLevel[9] - keccak256(0x00000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x8a8dc4e5242ea8b1ab1d60606dae757e6c2cca9f92a2cced9f72c19960bcb458"), common.BigToHash(big.NewInt(1335344342)))
	// percentByHoldLevel[10] - keccak256(0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x9dcb9783ba5cd0b54745f65f4f918525e461e91888c334e5342cb380ac558d53"), common.BigToHash(big.NewInt(1347579478)))
	// percentByHoldLevel[11] - keccak256(0x000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0x2d72af3c1b2b2956e6f694fb741556d5ca9524373974378cdbec16afa8b84164"), common.BigToHash(big.NewInt(1438828875)))
	// percentByHoldLevel[12] - keccak256(0x000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003)
	stateDB.SetState(m.soulDropAddress, common.HexToHash("0xd56a60595ebefebed7f22dcee6c2acc61b06cf8c68e84c88677840365d1ff92b"), common.BigToHash(big.NewInt(1677838513)))
}
